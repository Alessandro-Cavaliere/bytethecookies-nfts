// SPDX-License-Identifier: MIT
pragma solidity 0.8.26;

import {Script, console} from "forge-std/Script.sol";
import {DevOpsTools} from "foundry-devops/src/DevOpsTools.sol";
import "../src/ByteTheCookiesNFTCollection.sol";
import {Vm} from "forge-std/Vm.sol";

contract MintByteTheCookiesNFT is Script {
    string public exampleImageUri = "application/json;base64,";
    uint256 public constant MINT_PRICE = 0.01 ether;

    function run() external {
        address mostRecentlyDeployedNFTContract =
            DevOpsTools.get_most_recent_deployment("ByteTheCookiesNFTCollection", block.chainid);
        ByteTheCookiesNFTCollection(payable(mostRecentlyDeployedNFTContract));
        console.log("Most recently deployed NFT contract: ", mostRecentlyDeployedNFTContract);
        mintNftOnContract(mostRecentlyDeployedNFTContract);
    }

    function mintNftOnContract(address ByteTheCookiesNFTAddress) public payable {
        vm.startBroadcast();
        ByteTheCookiesNFTCollection(ByteTheCookiesNFTAddress).mintNft{value: MINT_PRICE}(exampleImageUri);
        vm.stopBroadcast();
    }
}

contract SettingWhitelist is Script {
    address[] public addresses = [
        0x9cFf19AAf6f6B46639BD66a0a37dE941325BAfF2,
        0x53b2DAC7Bb0BDa548CF241faCd51c2628664C216,
        0x2c88eF658f7Ee732D0f885bCA44F10491b0Bb3CA,
        0x4490716bcee5153eB0f92e6329FE5f4f9a8b4524,
        0x523284b365300f44EfF3FFe6E243a688B60e3d9f,
        0x9a4267d4B1e221f9Cc4c4596367592E5E85F288b,
        0x16f87a40142E062d1ACeFFa4D925114f989f9370
        //In attesa degli altri membri...
    ];

    function run() external {
        address mostRecentlyDeployedNFTContract =
            DevOpsTools.get_most_recent_deployment("ByteTheCookiesNFTCollection", block.chainid);
        ByteTheCookiesNFTCollection nftContract = ByteTheCookiesNFTCollection(payable(mostRecentlyDeployedNFTContract));
        addToWhitelist(nftContract);
    }

    function addToWhitelist(ByteTheCookiesNFTCollection nftContract) internal {
        vm.startBroadcast();
        for (uint256 i = 0; i < addresses.length; i++) {
            nftContract.addToWhitelist(addresses[i]);
        }
        vm.stopBroadcast();
    }
}
